/**
 * @mainpage The Project: "In Search of the Cursed Island’s Treasure"
 *
 * @section intro Introduction
 * This project involves developing a simple game in C, leveraging modular programming, 
 * state machines, and Makefiles. The player controls an adventurer navigating a 10x10 
 * grid to find a hidden treasure while avoiding traps and pirates.
 *
 * @section features Key Features
 * - **Gameplay:** The game runs in the terminal, using `z`, `q`, `s`, and `d` keys for movement.
 * - **Initial Mechanics (Increment 1):** The player starts at a fixed position, and the treasure 
 *   is placed randomly. The game is won when the player reaches the treasure.
 *
 * @section increments Further Increments
 * - **Increment 2:** The player has health points and loses them upon stepping on traps.
 * - **Increment 3:** A pirate is introduced, chasing the player if visible and moving randomly otherwise.
 *
 * @section objectives Educational Objectives
 * - Writing a structured Makefile.
 * - Implementing a modular C program.
 * - Designing and coding a state machine to manage game logic.
 *
 * This project serves as an advanced C programming exercise, reinforcing key software development concepts.
 *
 * @section state_machine State Machine
 * ​​The state machine diagram represents the different stages and transitions of the game.
 * The diagram below illustrates the game states and associated events.
 *
  * \dot
 * digraph StateMachine {
 *     rankdir=LR;
 *     S_INIT -> S_ACQUISITION_CLAVIER [label="E_START / A_INIT_GAME"];
 *     
 *     S_ACQUISITION_CLAVIER -> S_ACQUISITION_CLAVIER [label="E_START / A_NOP"];
 *     S_ACQUISITION_CLAVIER -> S_DEPLACEMENT [label="E_KEY_UP / A_MOVE_UP"];
 *     S_ACQUISITION_CLAVIER -> S_DEPLACEMENT [label="E_KEY_DOWN / A_MOVE_DOWN"];
 *     S_ACQUISITION_CLAVIER -> S_DEPLACEMENT [label="E_KEY_LEFT / A_MOVE_LEFT"];
 *     S_ACQUISITION_CLAVIER -> S_DEPLACEMENT [label="E_KEY_RIGHT / A_MOVE_RIGHT"];
 *     S_ACQUISITION_CLAVIER -> S_GAME_OVER [label="E_KEY_QUIT / A_FREE_GAME"];
 *     S_ACQUISITION_CLAVIER -> S_ACQUISITION_CLAVIER [label="E_OTHER_KEY / A_NOP"];
 *     S_ACQUISITION_CLAVIER -> S_ACQUISITION_CLAVIER [label="E_MOVE_DONE / A_NOP"];
 *     S_ACQUISITION_CLAVIER -> S_ACQUISITION_CLAVIER [label="E_VICTORY / A_NOP"];
 *     S_ACQUISITION_CLAVIER -> S_ACQUISITION_CLAVIER [label="E_DEFEAT / A_NOP"];
 *     S_ACQUISITION_CLAVIER -> S_ACQUISITION_CLAVIER [label="E_CONTINUE / A_NOP"];
 *     
 *     S_DEPLACEMENT -> S_VERIFICATION_VICTOIRE [label="E_MOVE_DONE / A_PRINT_GAME"];
 *     
 *     S_VERIFICATION_VICTOIRE -> S_GAME_OVER [label="E_VICTORY / A_PRINT_VICTORY"];
 *     S_VERIFICATION_VICTOIRE -> S_GAME_OVER [label="E_DEFEAT / A_PRINT_DEFEAT"];
 *     S_VERIFICATION_VICTOIRE -> S_ACQUISITION_CLAVIER [label="E_CONTINUE / A_NOP"];
 * }
 * \enddot
 *
 * @section class_diagram Class diagram
 * This diagram illustrates the main classes in the game and their relationships.
 *
 * ![Class Diagram](./doc/img/diagramm_class.svg)
 *
 */
